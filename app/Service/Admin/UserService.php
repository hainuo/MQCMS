<?php
declare(strict_types=1);

namespace App\Service\Admin;

use App\Constants\ErrorCode;
use App\Exception\BusinessException;
use App\Model\User;
use App\Service\BaseService;
use App\Service\UserInfoService;
use App\Utils\Common;
use Hyperf\DbConnection\Db;
use Hyperf\Di\Annotation\Inject;
use Hyperf\HttpServer\Contract\RequestInterface;

class UserService extends BaseService
{
    /**
     * @Inject()
     * @var User
     */
    public $table;

    /**
     * @Inject()
     * @var UserInfoService
     */
    public $userInfoService;

    /**
     * @param RequestInterface $request
     * @return \Hyperf\Contract\PaginatorInterface
     */

    public function index(RequestInterface $request)
    {
        try {
            $table = $this->table->getTable();
            $userInfoTable = $this->userInfoService->table->getTable();

            $this->select = [
                $table => ['*'],
                $userInfoTable => ['intro', 'like_num', 'follow_num', 'fans_num', 'post_num', 'my_like_num'],
            ];
            $this->orderBy = [
                $table => ['id' => 'DESC']
            ];
            $this->joinTables = [
                $userInfoTable => [$table . '.id', '=', $userInfoTable . '.user_id']
            ];
            return parent::index($request);

        } catch (\Exception $e) {
            throw new BusinessException((int)$e->getCode(), $e->getMessage());
        }
    }

    /**
     * @param RequestInterface $request
     * @return int
     * @throws \Exception
     */
    public function store(RequestInterface $request)
    {
        $userName = $request->input('user_name');
        $realName = $request->input('real_name');
        $phone = $request->input('phone');
        $status = $request->has('status') ? $request->input('status') : 1;

        $this->select = ['id'];
        $this->condition = [['user_name', '=', $userName]];
        $userInfo = parent::show($request);
        if ($userInfo) {
            throw new BusinessException(ErrorCode::BAD_REQUEST, '用户名已经存在');
        }

        $ip = $request->getServerParams()['remote_addr'];
        $salt = Common::generateSalt();
        $this->data = [
            'uuid' => Common::generateSnowId(),
            'user_name' => $userName,
            'real_name' => $realName,
            'nick_name' => $userName . generateRandomString(6),
            'phone' => $phone,
            'avatar' => '',
            'password' => Common::generatePasswordHash($phone, $salt),
            'salt' => $salt,
            'status' => $status,
            'register_time' => time(),
            'register_ip' => $ip,
            'login_time' => time(),
            'login_ip' => $ip,
            'created_at' => time(),
            'updated_at' => time(),
        ];
        Db::beginTransaction();
        try{
            $lastInsertId = parent::store($request);
             $this->userInfoService->data = [
                'user_id' => $lastInsertId,
                'created_at' => time(),
                'updated_at' => time(),
            ];
            $this->userInfoService->insert($request);
            Db::commit();
            return $lastInsertId;

        } catch(\Exception $e) {
            Db::rollBack();
            throw new BusinessException((int)$e->getCode(), '添加失败');
        }
    }

    /**
     * @param RequestInterface $request
     * @return int
     */
    public function update(RequestInterface $request)
    {
        $id = $request->input('id');
        $userName = $request->input('user_name');
        $realName = $request->input('real_name');
        $phone = $request->input('phone');
        $status = $request->has('status') ? $request->input('status') : 1;

        $this->condition = ['id' => $id];
        $this->data = [
            'user_name' => $userName,
            'real_name' => $realName,
            'nick_name' => $userName . generateRandomString(6),
            'phone' => $phone,
            'status' => $status,
            'updated_at' => time(),
        ];
        return parent::update($request); // TODO: Change the autogenerated stub
    }
}